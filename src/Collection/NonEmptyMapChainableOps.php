<?php

declare(strict_types=1);

namespace Whsv26\Functional\Collection;

use Whsv26\Functional\Core\Option;
use Whsv26\Functional\Collection\Immutable\Map\Entry;
use Whsv26\Functional\Collection\Immutable\NonEmptyMap\NonEmptyHashMap;

/**
 * @template TKey
 * @template-covariant TValue
 * @psalm-immutable
 */
interface NonEmptyMapChainableOps
{
    /**
     * Produces new collection with given element
     *
     * ```php
     * >>> NonEmptyHashMap::collectPairsNonEmpty([['a', 1], ['b', 2]])->updated('b', 3)->toArray();
     * => [['a', 1], ['b', 3]]
     * ```
     *
     * @template TKeyIn
     * @template TValueIn
     * @param TKeyIn $key
     * @param TValueIn $value
     * @return NonEmptyMap<TKey|TKeyIn, TValue|TValueIn>
     */
    public function updated(mixed $key, mixed $value): NonEmptyMap;

    /**
     * Produces new collection without an element with given key
     *
     * ```php
     * >>> NonEmptyHashMap::collectPairsNonEmpty([['a', 1], ['b', 2]])->removed('b')->toArray();
     * => [['a', 1]]
     * ```
     *
     * @param TKey $key
     * @return Map<TKey, TValue>
     */
    public function removed(mixed $key): Map;

    /**
     * Filter collection by condition
     *
     * ```php
     * >>> NonEmptyHashMap::collectPairsNonEmpty([['a', 1], ['b', 2]])
     * >>>     ->filter(fn(Entry $e) => $e->value > 1)
     * >>>     ->toArray();
     * => [['b', 2]]
     * ```
     *
     * @psalm-param callable(Entry<TKey, TValue>): bool $predicate
     * @psalm-return Map<TKey, TValue>
     */
    public function filter(callable $predicate): Map;

    /**
     * A combined {@see NonEmptyHashMap::map} and {@see NonEmptyHashMap::filter}.
     *
     * Filtering is handled via Option instead of Boolean.
     * So the output type TValueOut can be different from the input type TValue.
     * Also, NonEmpty* prefix will be lost.
     *
     * ```php
     * >>> NonEmptyHashMap::collectPairsNonEmpty([['a', 'zero'], ['b', '1'], ['c', '2']])
     * >>>     ->filterMap(fn(Entry $e) => is_numeric($e->value) ? Option::some((int) $e->value) : Option::none())
     * >>>     ->toArray();
     * => [['b', 1], ['c', 2]]
     * ```
     *
     * @psalm-template TValueOut
     * @psalm-param callable(Entry<TKey, TValue>): Option<TValueOut> $callback
     * @psalm-return Map<TKey, TValueOut>
     */
    public function filterMap(callable $callback): Map;

    /**
     * Alias for {@see NonEmptyMapOps::mapValues()}
     *
     * Produces a new collection of elements by mapping each element in collection
     * through a transformation function (callback)
     *
     * ```php
     * >>> $collection = NonEmptyHashMap::collectPairsNonEmpty([['1', 1], ['2', 2]]);
     * => NonEmptyHashMap('1' -> 1, '2' -> 2)
     *
     * >>> $collection->map(fn(Entry $e) => $e->value + 1);
     * => NonEmptyHashMap('1' -> 2, '2' -> 3)
     * ```
     *
     * @template TValueOut
     * @psalm-param callable(Entry<TKey, TValue>): TValueOut $callback
     * @psalm-return NonEmptyMap<TKey, TValueOut>
     */
    public function map(callable $callback): NonEmptyMap;

    /**
     * Produces a new collection of elements by mapping each element in collection
     * through a transformation function (callback)
     *
     * ```php
     * >>> $collection = NonEmptyHashMap::collectPairsNonEmpty([['1', 1], ['2', 2]]);
     * => NonEmptyHashMap('1' -> 1, '2' -> 2)
     *
     * >>> $collection->mapValues(fn(Entry $e) => $e->value + 1);
     * => NonEmptyHashMap('1' -> 2, '2' -> 3)
     * ```
     *
     * @template TValueOut
     * @psalm-param callable(Entry<TKey, TValue>): TValueOut $callback
     * @psalm-return NonEmptyMap<TKey, TValueOut>
     */
    public function mapValues(callable $callback): NonEmptyMap;

    /**
     * Produces a new collection of elements by assigning the values to keys generated by a transformation function (callback).
     *
     * ```php
     * >>> $collection = NonEmptyHashMap::collectPairsNonEmpty([['1', 1], ['2', 2]]);
     * => NonEmptyHashMap('1' -> 1, '2' -> 2)
     *
     * >>> $collection->mapKeys(fn(Entry $e) => $e->value + 1);
     * => NonEmptyHashMap(2 -> 1, 3 -> 2)
     * ```
     *
     * @template TKeyOut
     * @psalm-param callable(Entry<TKey, TValue>): TKeyOut $callback
     * @psalm-return NonEmptyMap<TKeyOut, TValue>
     */
    public function mapKeys(callable $callback): NonEmptyMap;

    /**
     * Returns sequence of collection keys
     *
     * ```php
     * >>> $collection = NonEmptyHashMap::collectPairsNonEmpty([['1', 1], ['2', 2]]);
     * => NonEmptyHashMap('1' -> 1, '2' -> 2)
     *
     * >>> $collection->keys(fn($elem) => $elem + 1)->toArray();
     * => ['1', '2']
     * ```
     *
     * @psalm-return NonEmptySeq<TKey>
     */
    public function keys(): NonEmptySeq;

    /**
     * Returns sequence of collection values
     *
     * ```php
     * >>> $collection = NonEmptyHashMap::collectPairsNonEmpty([['1', 1], ['2', 2]]);
     * => NonEmptyHashMap('1' -> 1, '2' -> 2)
     *
     * >>> $collection->values(fn($elem) => $elem + 1)->toArray();
     * => [1, 2]
     * ```
     *
     * @psalm-return NonEmptySeq<TValue>
     */
    public function values(): NonEmptySeq;
}
