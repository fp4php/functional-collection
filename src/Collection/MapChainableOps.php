<?php

declare(strict_types=1);

namespace Whsv26\Functional\Collection;

use Whsv26\Functional\Core\Option;

/**
 * @template TKey
 * @template-covariant TValue
 * @psalm-immutable
 */
interface MapChainableOps
{
    /**
     * Produces new collection with given element
     *
     * ```php
     * >>> HashMap::collectPairs([['a', 1], ['b', 2]])->updated('b', 3)->toArray();
     * => [['a', 1], ['b', 3]]
     * ```
     *
     * @template TKeyIn
     * @template TValueIn
     * @param TKeyIn $key
     * @param TValueIn $value
     * @return Map<TKey|TKeyIn, TValue|TValueIn>
     */
    public function updated(mixed $key, mixed $value): Map;

    /**
     * Produces new collection without an element with given key
     *
     * ```php
     * >>> HashMap::collectPairs([['a', 1], ['b', 2]])->removed('b')->toArray();
     * => [['a', 1]]
     * ```
     *
     * @param TKey $key
     * @return Map<TKey, TValue>
     */
    public function removed(mixed $key): Map;

    /**
     * Filter collection by condition
     *
     * ```php
     * >>> HashMap::collectPairs([['a', 1], ['b', 2]])->filterValues(fn($val) => $val > 1)->toArray();
     * => [['b', 2]]
     * ```
     *
     * @psalm-param callable(TValue): bool $predicate
     * @psalm-return Map<TKey, TValue>
     */
    public function filterValues(callable $predicate): Map;

    /**
     * Filter collection by condition
     *
     * ```php
     * >>> HashMap::collectPairs([['a', 1], ['b', 2]])->filterKeys(fn($key) => $key !== 'a')->toArray();
     * => [['b', 2]]
     * ```
     *
     * @psalm-param callable(TKey): bool $predicate
     * @psalm-return Map<TKey, TValue>
     */
    public function filterKeys(callable $predicate): Map;

    /**
     * A combined {@see MapOps::map} and {@see MapOps::filter}.
     *
     * Filtering is handled via Option instead of Boolean.
     * So the output type TValueOut can be different from the input type TValue.
     *
     * ```php
     * >>> HashMap::collectPairs([['a', 'zero'], ['b', '1'], ['c', '2']])
     * >>>     ->filterMapValues(fn($val) => is_numeric($val) ? Option::some((int) $val) : Option::none())
     * >>>     ->toArray();
     * => [['b', 1], ['c', 2]]
     * ```
     *
     * @psalm-template TValueOut
     * @psalm-param callable(TValue): Option<TValueOut> $callback
     * @psalm-return Map<TKey, TValueOut>
     */
    public function filterMapValues(callable $callback): Map;

    /**
     * A combined {@see MapOps::map} and {@see MapOps::filter}.
     *
     * Filtering is handled via Option instead of Boolean.
     * So the output type TValueOut can be different from the input type TValue.
     *
     * ```php
     * >>> HashMap::collectPairs([['a', 'zero'], ['b', '1'], ['c', '2']])
     * >>>     ->filterMapKeys(fn($key) => 'a' !== $key ? Option::some('_' . $key) : Option::none())
     * >>>     ->toArray();
     * => [['_b', '1'], ['_c', '2']]
     * ```
     *
     * @psalm-template TKeyOut
     * @psalm-param callable(TKey): Option<TKeyOut> $callback
     * @psalm-return Map<TKeyOut, TValue>
     */
    public function filterMapKeys(callable $callback): Map;

    /**
     * Produces a new collection of elements by mapping each element in collection
     * through a transformation function (callback)
     *
     * ```php
     * >>> $collection = HashMap::collectPairs([['1', 1], ['2', 2]]);
     * => HashMap('1' -> 1, '2' -> 2)
     *
     * >>> $collection->mapValues(fn($val) => $val + 1);
     * => HashMap('1' -> 2, '2' -> 3)
     * ```
     *
     * @template TValueOut
     * @psalm-param callable(TValue): TValueOut $callback
     * @psalm-return Map<TKey, TValueOut>
     */
    public function mapValues(callable $callback): Map;

    /**
     * Produces a new collection of elements by assigning the values to keys generated by a transformation function (callback).
     *
     * ```php
     * >>> $collection = HashMap::collectPairs([['1', 1], ['2', 2]]);
     * => HashMap('1' -> 1, '2' -> 2)
     *
     * >>> $collection->mapKeys(fn($key) => '_' . $key);
     * => HashMap('_1' -> 1, '_2' -> 2)
     * ```
     *
     * @template TKeyOut
     * @psalm-param callable(TKey): TKeyOut $callback
     * @psalm-return Map<TKeyOut, TValue>
     */
    public function mapKeys(callable $callback): Map;

    /**
     * Returns sequence of collection keys
     *
     * ```php
     * >>> $collection = HashMap::collectPairs([['1', 1], ['2', 2]]);
     * => HashMap('1' -> 1, '2' -> 2)
     *
     * >>> $collection->keys(fn($elem) => $elem + 1)->toArray();
     * => ['1', '2']
     * ```
     *
     * @psalm-return Seq<TKey>
     */
    public function keys(): Seq;

    /**
     * Returns sequence of collection values
     *
     * ```php
     * >>> $collection = HashMap::collectPairs([['1', 1], ['2', 2]]);
     * => HashMap('1' -> 1, '2' -> 2)
     *
     * >>> $collection->values(fn($elem) => $elem + 1)->toArray();
     * => [1, 2]
     * ```
     *
     * @psalm-return Seq<TValue>
     */
    public function values(): Seq;
}
